[{"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/index.js":"1","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/App.js":"2","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/dashboard.jsx":"3","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/search.jsx":"4","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/filter.jsx":"5","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/panel.jsx":"6"},{"size":262,"mtime":1625578837609,"results":"7","hashOfConfig":"8"},{"size":1690,"mtime":1626787348382,"results":"9","hashOfConfig":"8"},{"size":1641,"mtime":1626787350646,"results":"10","hashOfConfig":"8"},{"size":5862,"mtime":1626786783221,"results":"11","hashOfConfig":"8"},{"size":7657,"mtime":1626787349854,"results":"12","hashOfConfig":"8"},{"size":1245,"mtime":1626786787857,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"feed46",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/index.js",[],["28","29"],"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/App.js",[],"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/dashboard.jsx",[],"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/search.jsx",[],"/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/filter.jsx",["30"],"import { useState, useEffect } from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\nimport React from \"react\";\n\nfunction Filter({ setFilter }) {\n  // stores the filetype selected\n  const [fileType, setFileType] = useState(\"\");\n  // stores the minimum size entered by the user (whether valid or invalid)\n  const [minSize, setMinSize] = useState(\"\");\n  // only stores the valid min size after error checking\n  const [validMinSize, setValidMinSize] = useState(\"\");\n  // stores the maximum size entered by the user (whether valid or invalid)\n  const [maxSize, setMaxSize] = useState(\"\");\n  // only stores the valid max size after error checking\n  const [validMaxSize, setValidMaxSize] = useState(\"\");\n  // stores the sample type selected\n  const [sampleType, setSampleType] = useState(\"\");\n  // stores the refgenome selected\n  const [refGenome, setRefGenome] = useState(\"\");\n  // initialises error statements for both min and max sizes to \"none\"\n  const [errorMin, setErrorMin] = useState(\"none\");\n  const [errorMax, setErrorMax] = useState(\"none\");\n\n  // function that clears all the set filter parameters to be empty when called\n  function resetFilters() {\n    setFileType(\"\");\n    setValidMinSize(\"\");\n    setValidMaxSize(\"\");\n    setMinSize(\"\");\n    setMaxSize(\"\");\n    setSampleType(\"\");\n    setRefGenome(\"\");\n    setErrorMin(\"none\");\n    setErrorMax(\"none\");\n  }\n\n  // every time the user inputs into the minsize/maxsize box it checks through\n  // a regex expression whether it is a number being inputted, if it is not then\n  // the error is set to display as a \"block\" and the error will only be removed\n  // from view once valid input then resurfaces, if it is valid input then the\n  // valid number is then set to setValidMinSize/setValidMaxSize\n  function handleMin(e) {\n    const regex = /^[0-9\\b]+$/;\n    if (!regex.test(e) && e) {\n      setMinSize(e);\n      setValidMinSize(\"\");\n      setErrorMin(\"block\");\n    } else {\n      setMinSize(e);\n      setValidMinSize(e);\n      setErrorMin(\"none\");\n    }\n  }\n\n  function handleMax(e) {\n    const regex = /^[0-9\\b]+$/;\n    if (!regex.test(e) && e) {\n      setMaxSize(e);\n      setValidMaxSize(\"\");\n      setErrorMax(\"block\");\n    } else {\n      setMaxSize(e);\n      setValidMaxSize(e);\n      setErrorMax(\"none\");\n    }\n  }\n\n  // appends all the filter parameters together in a string only if they have\n  // been selected\n  var selectedFilter =\n    `${fileType ? `&filetype=${fileType}` : \"\"}` +\n    `${validMinSize ? `&min_size=${validMinSize}` : \"\"}` +\n    `${validMaxSize ? `&max_size=${validMaxSize}` : \"\"}` +\n    `${sampleType ? `&sample_type=${sampleType}` : \"\"}` +\n    `${refGenome ? `&refgenome=${refGenome}` : \"\"}`;\n\n  // everytime the filter is updated it dynamically changes the api url and makes a new\n  // call to reflect the selected filter parameter, without the need of clicking a submit button\n  useEffect(() => {\n    setFilter(selectedFilter);\n  }, [setFilter, selectedFilter]);\n\n  return (\n    <div className=\"filter-form\">\n      <table>\n        <tr>\n          <td className=\"f-option\">\n            <p class=\"f-header\">Filetype:</p>\n          </td>\n          <td className=\"f-form\">\n            <FormControl variant=\"outlined\" size=\"small\" className=\"form-box\">\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={fileType}\n                onChange={e => setFileType(e.target.value)}\n              >\n                <MenuItem value={\"\"}>None</MenuItem>\n                <MenuItem value={\"tdf\"}>tdf</MenuItem>\n                <MenuItem value={\"tar\"}>tar</MenuItem>\n                <MenuItem value={\"bam\"}>bam</MenuItem>\n                <MenuItem value={\"bai\"}>bai</MenuItem>\n                <MenuItem value={\"fastq\"}>fastq</MenuItem>\n                <MenuItem value={\"json\"}>json</MenuItem>\n                <MenuItem value={\"vcf\"}>vcf</MenuItem>\n                <MenuItem value={\"gvcf\"}>gvcf</MenuItem>\n                <MenuItem value={\"metrics\"}>metrics</MenuItem>\n                <MenuItem value={\"hist\"}>hist</MenuItem>\n                <MenuItem value={\"stats\"}>stats</MenuItem>\n                <MenuItem value={\"flagstats\"}>flagstats</MenuItem>\n                <MenuItem value={\"idxstats\"}>idxstats</MenuItem>\n                <MenuItem value={\"DLERROR\"}>DLERROR</MenuItem>\n              </Select>\n            </FormControl>\n          </td>\n        </tr>\n        <tr>\n          <td className=\"f-option\">\n            <p class=\"f-header\">Minimum filesize:</p>\n          </td>\n          <td className=\"f-form\">\n            <TextField\n              id=\"outlined-required\"\n              label=\"Bytes\"\n              size=\"small\"\n              variant=\"outlined\"\n              className=\"form-box\"\n              value={minSize}\n              onChange={e => handleMin(e.target.value)}\n            />\n            <div className=\"search-error\" style={{ display: errorMin }}>\n              <ErrorOutlineIcon fontSize=\"small\"></ErrorOutlineIcon>\n              <h8>Enter number of bytes!</h8>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td className=\"f-option\">\n            <p class=\"f-header\">Maximum filesize:</p>\n          </td>\n          <td className=\"f-form\">\n            <TextField\n              id=\"outlined-required\"\n              label=\"Bytes\"\n              size=\"small\"\n              variant=\"outlined\"\n              className=\"form-box\"\n              value={maxSize}\n              onChange={e => handleMax(e.target.value)}\n            />\n            <div className=\"search-error\" style={{ display: errorMax }}>\n              <ErrorOutlineIcon fontSize=\"small\"></ErrorOutlineIcon>\n              <h8>Enter number of bytes!</h8>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td className=\"f-option\">\n            <p class=\"f-header\">Sample type:</p>\n          </td>\n          <td className=\"f-form\">\n            <FormControl variant=\"outlined\" size=\"small\" className=\"form-box\">\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={sampleType}\n                onChange={e => setSampleType(e.target.value)}\n              >\n                <MenuItem value={\"\"}>None</MenuItem>\n                <MenuItem value={\"tumour\"}>tumour</MenuItem>\n                <MenuItem value={\"normal\"}>normal</MenuItem>\n                <MenuItem value={\"donor\"}>donor</MenuItem>\n              </Select>\n            </FormControl>\n          </td>\n        </tr>\n        <tr>\n          <td className=\"f-option\">\n            <p class=\"f-header\">Reference genome:</p>\n          </td>\n          <td className=\"f-form\">\n            <FormControl variant=\"outlined\" size=\"small\" className=\"form-box\">\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={refGenome}\n                onChange={e => setRefGenome(e.target.value)}\n              >\n                <MenuItem value={\"\"}>None</MenuItem>\n                <MenuItem value={\"hs37d5\"}>hs37d5</MenuItem>\n              </Select>\n            </FormControl>\n          </td>\n        </tr>\n      </table>\n      <div className=\"reset\">\n        <button className=\"reset-filter\" onClick={resetFilters}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Filter;\n","/Users/ritshab/Desktop/stuff/code_projects/ccia-app/src/components/panel.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":6,"column":8,"nodeType":"37","messageId":"38","endLine":6,"endColumn":14},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]