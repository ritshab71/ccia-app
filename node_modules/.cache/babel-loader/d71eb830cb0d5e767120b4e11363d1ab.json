{"ast":null,"code":"var _jsxFileName = \"/Users/ritshab/Desktop/desn2000/ccia/src/components/dashboard.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [results, setResults] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://20.191.211.229:5000/v1/datafiles?filetype=tdf&max_size=30\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setLoading(false);\n      setResults(data);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading || !results ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: results.map(result => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: result.file_id,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: result.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: result.filetype\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"5n/+N9DKVBGuS4UDhIdr+9tc5vU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/ritshab/Desktop/desn2000/ccia/src/components/dashboard.jsx"],"names":["useState","useEffect","Dashboard","loading","setLoading","results","setResults","fetch","method","headers","then","res","json","data","map","result","file_id","filename","filetype"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAAC,kEAAD,EAAqE;AACxEC,MAAAA,MAAM,EAAE,KADgE;AAExEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF+D,KAArE,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KARH,EASGF,IATH,CASQG,IAAI,IAAI;AACZT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,UAAU,CAACO,IAAD,CAAV;AACD,KAZH;AAaD,GAdQ,CAAT;AAgBA,sBACE;AAAA,cACGV,OAAO,IAAI,CAACE,OAAZ,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA,gBACGA,OAAO,CAACS,GAAR,CAAYC,MAAM,IAAI;AACrB,4BACE;AAAK,UAAA,EAAE,EAAEA,MAAM,CAACC,OAAhB;AAAA,kCACE;AAAA,sBAAID,MAAM,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAIF,MAAM,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD,OAPA;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAtCQhB,S;;KAAAA,S;AAwCT,eAAeA,SAAf","sourcesContent":["// import React, { Component } from \"react\";\nimport { useState, useEffect } from \"react\";\n\nfunction Dashboard() {\n  const [loading, setLoading] = useState(true);\n  const [results, setResults] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"http://20.191.211.229:5000/v1/datafiles?filetype=tdf&max_size=30\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setLoading(false);\n        setResults(data);\n      });\n  });\n\n  return (\n    <div>\n      {loading || !results ? (\n        <h1>Loading...</h1>\n      ) : (\n        <div>\n          {results.map(result => {\n            return (\n              <div id={result.file_id}>\n                <p>{result.filename}</p>\n                <p>{result.filetype}</p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}