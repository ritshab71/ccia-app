{"ast":null,"code":"var _jsxFileName = \"/Users/ritshab/Desktop/desn2000/ccia/src/components/dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [datafiles, setDatafiles] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://20.191.211.229:5000/v1/datafiles?filetype=tdf&max_size=30\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(files => {\n      setLoading(false);\n      setDatafiles(files);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading || !datafiles ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: datafiles.map((result, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: result.file_id,\n          className: \"datafiles\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Result \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Filename: \", result.filename]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Filetype: \", result.filetype]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"meta-\" + result.file_id,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Metadata\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                children: \"Patient ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this), result._metadata.patient_id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                children: \"Sample ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 21\n              }, this), result._metadata.sample_id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                children: \"Sample Type:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 21\n              }, this), result._metadata.sample_type]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                children: \"Genome:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 21\n              }, this), result._metadata.refgenome]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"B75K0LXFjLoda1t4qwJUxq4qXxY=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/ritshab/Desktop/desn2000/ccia/src/components/dashboard.jsx"],"names":["useState","useEffect","Dashboard","loading","setLoading","datafiles","setDatafiles","fetch","method","headers","then","res","json","files","map","result","index","file_id","filename","filetype","_metadata","patient_id","sample_id","sample_type","refgenome"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAAC,kEAAD,EAAqE;AACxEC,MAAAA,MAAM,EAAE,KADgE;AAExEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF+D,KAArE,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KARH,EASGF,IATH,CASQG,KAAK,IAAI;AACbT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,YAAY,CAACO,KAAD,CAAZ;AACD,KAZH;AAaD,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACE;AAAA,cACGV,OAAO,IAAI,CAACE,SAAZ,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA,gBACGA,SAAS,CAACS,GAAV,CAAc,CAACC,MAAD,EAASC,KAAT,KAAmB;AAChC,4BACE;AAAK,UAAA,EAAE,EAAED,MAAM,CAACE,OAAhB;AAAyB,UAAA,SAAS,EAAC,WAAnC;AAAA,kCACE;AAAA,kCAAgBD,KAAK,GAAG,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,qCAAcD,MAAM,CAACG,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,qCAAcH,MAAM,CAACI,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAK,YAAA,EAAE,EAAE,UAAUJ,MAAM,CAACE,OAA1B;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EACqBF,MAAM,CAACK,SAAP,CAAiBC,UADtC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAKE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EACoBN,MAAM,CAACK,SAAP,CAAiBE,SADrC;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAQE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EACsBP,MAAM,CAACK,SAAP,CAAiBG,WADvC;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,eAWE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EACiBR,MAAM,CAACK,SAAP,CAAiBI,SADlC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAsBD,OAvBA;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GAtDQtB,S;;KAAAA,S;AAwDT,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction Dashboard() {\n  const [loading, setLoading] = useState(true);\n  const [datafiles, setDatafiles] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"http://20.191.211.229:5000/v1/datafiles?filetype=tdf&max_size=30\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(files => {\n        setLoading(false);\n        setDatafiles(files);\n      });\n  }, []);\n\n  return (\n    <div>\n      {loading || !datafiles ? (\n        <h2>Loading...</h2>\n      ) : (\n        <div>\n          {datafiles.map((result, index) => {\n            return (\n              <div id={result.file_id} className=\"datafiles\">\n                <strong>Result {index + 1}</strong>\n                <p>Filename: {result.filename}</p>\n                <p>Filetype: {result.filetype}</p>\n                <div id={\"meta-\" + result.file_id}>\n                  <h3>Metadata</h3>\n                  <p>\n                    <u>Patient ID:</u>{result._metadata.patient_id}\n                  </p>\n                  <p>\n                    <u>Sample ID:</u>{result._metadata.sample_id}\n                  </p>\n                  <p>\n                    <u>Sample Type:</u>{result._metadata.sample_type}\n                  </p>\n                  <p>\n                    <u>Genome:</u>{result._metadata.refgenome}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}